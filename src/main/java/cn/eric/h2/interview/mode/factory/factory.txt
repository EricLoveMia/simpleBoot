
1、简单工厂  传参数获取对象
       问题：新增产品需要修改工厂实现类
       解决：传入class，获取对象
       简单工厂模式缺点
假如每种产品创建不仅仅只是实例化一个对象，还有其他逻辑需要处理，那么我们无法直接使用一句反射，避免不了写很多if(亦或者用switch循环)，这样的话每新增一个产品我们都需要修改工厂实现类，随着产品链越来越丰富，工厂的职责会变得越来越多，久而久之会越来越难以维护


2、普通工厂模式
每个产品一个工厂，不同的工厂产生不同的对象。例如苹果工厂、橘子工厂，再有新的创建新的工厂；

简单工厂就是所有产品都由一个工厂类一个方法来创建，而工厂方法将工厂的职责也进行细化了，每种产品都由自己特定的工厂来生产，这也是单一职责原则的体现。

工厂方法模式适用场景
1、创建对象需要大量重复的代码。
2、客户端（应用层）不依赖于产品类实例如何被创建、实现等细节。
3、一个类通过其子类来指定创建哪个对象。

工厂方法模式缺点
1、类的个数容易过多，增加复杂度。
2、增加了系统的抽象性和理解难度

3、抽象工厂模式
抽象工厂使用场景：
当我们有一系列产品(如上面的Apple,Orange)。而这一系列产品每种产品又需要具有不同的创建方法(如上种植Apple和种植Orange方法肯定是不同的需要不同的方法实现)。

抽象工厂 将一系列的产品创建method合并到一个工厂中
